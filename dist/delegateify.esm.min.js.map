{"version":3,"file":"delegateify.esm.min.js","sources":["../src/js/utils/index.js","../src/js/index.js"],"sourcesContent":["export default {\r\n\r\n\r\n    throw_Error(msg) {\r\n        throw new Error(`Delegateify: ${msg}`);\r\n    },\r\n\r\n    contains(set, subSet) {\r\n        for (let i = 0; i < subSet.length; i++) {\r\n            if (set.indexOf(subSet[i]) === -1) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    },\r\n\r\n    contains2(set, subSet) {\r\n        return subSet.every(item => set.includes(item));\r\n    }\r\n\r\n}","import utils from \"./utils\";\r\n\r\nlet i = 0\r\n\r\nclass Delegateify {\r\n  element\r\n  #namespace = 'delegateify'\r\n  #id\r\n  #scopedSelectorRegex = /^\\s*(>|:scope\\s*>)/\r\n  #listenersByType\r\n  #allListeners = []\r\n  //存储id的key\r\n  #idKey = `__${this.#namespace}Id__`\r\n  //路径的key\r\n  #pathKey\r\n\r\n  #stopPropagationKey = `_${this.#namespace}PropagationStopped`\r\n  #stopImmediatePropagationKey = `_${this.#namespace}ImmediatePropagationStopped`\r\n\r\n  #captureListener\r\n  #bubbleListener\r\n\r\n  constructor(selector) {\r\n\r\n    this.element = typeof selector === 'string' ? document.querySelector(selector) : selector;\r\n\r\n    // 事件名称到事件数组的映射\r\n    // 不要从 Object 继承，这样我们就不会与其原型上的属性发生冲突\r\n    this.#listenersByType = Object.create(null);\r\n\r\n    /*\r\n  该实例跟踪的所有侦听器对象的列表\r\n       每个项目采用以下形式：\r\n      {\r\n        eventName: String,\r\n        handler: Function,\r\n        namespaces: Array<string>,\r\n        selector: String | null,\r\n        useCapture: Boolean,\r\n        isScoped: Boolean\r\n      }\r\n    */\r\n\r\n    // 确保this的值\r\n    this.#captureListener = this.#executeCaptureListener.bind(this);\r\n    this.#bubbleListener = this.#executeBubbleListener.bind(this);\r\n\r\n    // 所有实例都会获得一个ID\r\n    this.#id = i++;\r\n    this.#pathKey = `_${this.#namespace}Path${this.#id}`\r\n\r\n\r\n  }\r\n\r\n\r\n  on(eventName, selector, handler, useCapture) {\r\n    if (typeof selector === 'function') {\r\n      useCapture = handler;\r\n      handler = selector;\r\n      selector = null;\r\n    }\r\n\r\n    if (typeof handler !== 'function') {\r\n      utils.throw_Error('无法使用非函数处理程序添加侦听器')\r\n    }\r\n\r\n    // 如果每个假值（未定义或传递空字符串）则为空\r\n    if (!selector) {\r\n      selector = null;\r\n    }\r\n\r\n\r\n    if (typeof useCapture === 'undefined') {\r\n      // 强制使用Capture进行焦点和模糊事件\r\n      if (eventName === 'focus' || eventName === 'blur') {\r\n        // 默认情况下 true 仅适用于焦点和模糊事件\r\n        useCapture = true;\r\n      }\r\n      else {\r\n        // 默认为 false\r\n        // 这与 HTML API 匹配\r\n        useCapture = false;\r\n      }\r\n    }\r\n\r\n    // 提取命名空间\r\n    let namespaces = null;\r\n    let dotIndex = eventName.indexOf('.');\r\n    if (dotIndex !== -1) {\r\n      namespaces = eventName.slice(dotIndex + 1).split('.');\r\n      eventName = eventName.slice(0, dotIndex);\r\n    }\r\n\r\n    // 获取/创建事件类型的列表\r\n    let listenerList = this.#listenersByType[eventName];\r\n    if (!listenerList) {\r\n      listenerList = this.#listenersByType[eventName] = [];\r\n\r\n      // 添加实际的监听器\r\n      this.element.addEventListener(eventName, this.#captureListener, true);\r\n      this.element.addEventListener(eventName, this.#bubbleListener, false);\r\n    }\r\n\r\n    // 如果选择器有作用域，则设置特殊 ID 属性\r\n    let listenerIsScoped = this.#isScoped(selector);\r\n    if (listenerIsScoped) {\r\n      // 规范化选择器，使其不使用 :scope\r\n      selector = selector.replace(scopedSelectorRegex, '>');\r\n\r\n      // 存储唯一 ID 并设置我们将用于范围的特殊属性\r\n      this.element.setAttribute(this.#idKey, this.#id);\r\n    }\r\n\r\n    // 使用事件信息创建一个对象\r\n    const eventObject = {\r\n      eventName: eventName,\r\n      handler: handler,\r\n      namespaces: namespaces,\r\n      selector: selector,\r\n      useCapture: useCapture,\r\n      isScoped: listenerIsScoped\r\n    };\r\n\r\n    // 相对于当前类型并与其他类型一起存储\r\n    listenerList.push(eventObject);\r\n    this.#allListeners.push(eventObject);\r\n  }\r\n\r\n\r\n  off(eventName, selector, handler, useCapture) {\r\n    if (typeof selector === 'function') {\r\n      useCapture = handler;\r\n      handler = selector;\r\n      selector = null;\r\n    }\r\n\r\n    // 如果没有提供则为空\r\n    if (typeof eventName === 'undefined') {\r\n      eventName = null;\r\n    }\r\n\r\n    if (typeof selector === 'undefined') {\r\n      selector = null;\r\n    }\r\n\r\n    if (typeof handler === 'undefined') {\r\n      handler = null;\r\n    }\r\n\r\n    if (typeof useCapture === 'undefined') {\r\n      useCapture = null;\r\n    }\r\n\r\n    // 提取命名空间\r\n    let namespaces = null;\r\n    if (eventName) {\r\n      let dotIndex = eventName.indexOf('.');\r\n      if (dotIndex !== -1) {\r\n        namespaces = eventName.slice(dotIndex + 1).split('.');\r\n        eventName = eventName.slice(0, dotIndex);\r\n      }\r\n    }\r\n\r\n    // 为空\r\n    if (eventName === '') {\r\n      eventName = null;\r\n    }\r\n\r\n    let listener;\r\n    let index;\r\n    let listeners = this.#allListeners;\r\n\r\n    for (var i = 0; i < listeners.length; i++) {\r\n      listener = listeners[i];\r\n\r\n      if (\r\n        (eventName === null || listener.eventName === eventName) &&\r\n        (selector === null || listener.selector === selector) &&\r\n        (handler === null || listener.handler === handler) &&\r\n        (useCapture === null || listener.useCapture === useCapture) &&\r\n        (\r\n          // 删除匹配的侦听器，无论命名空间如何\r\n          namespaces === null ||\r\n          // 监听器匹配所有指定的命名空间\r\n          (listener.namespaces && utils.contains(listener.namespaces, namespaces))\r\n        )\r\n      ) {\r\n        // 删除监听信息\r\n        this.#allListeners.splice(i, 1);\r\n\r\n        // 数组长度已更改，因此在下一次迭代时检查相同的索引\r\n        i--;\r\n\r\n        // 获取listenersByType映射中的索引\r\n        if (!this.#listenersByType[listener.eventName]) {\r\n          utils.throw_Error(`缺少 ListenersByType 的${listener.eventName}`)\r\n        }\r\n\r\n        // 在其他查找列表中查找事件信息\r\n        index = this.#listenersByType[listener.eventName].indexOf(listener);\r\n        if (index !== -1) {\r\n          var mapList = this.#listenersByType[listener.eventName];\r\n\r\n          // 从地图上删除\r\n          mapList.splice(index, 1);\r\n\r\n          // 检查我们是否已删除此事件类型的所有侦听器\r\n          if (mapList.length === 0) {\r\n            // 如有必要，删除实际的侦听器\r\n            this.element.removeEventListener(listener.eventName, this.#captureListener, true);\r\n            this.element.removeEventListener(listener.eventName, this.#bubbleListener, false);\r\n\r\n            // 为了提高性能，避免使用删除运算符\r\n            this.#listenersByType[listener.eventName] = null;\r\n          }\r\n        }\r\n        else {\r\n          utils.throw_Error('事件存在于allEvents中，但不存在于listenersByType中')\r\n        }\r\n        // 现在别停下来！ 我们要删除所有匹配的监听器，所以继续循环\r\n      }\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n\r\n  destroy() {\r\n    if (this.destroyed) {\r\n      // 实例已被销毁，不执行任何操作\r\n      return;\r\n    }\r\n\r\n    // 移除所有的事件\r\n    this.off();\r\n\r\n    // 删除所有引用\r\n    this.#listenersByType = null;\r\n    this.#allListeners = null;\r\n    this.element = null;\r\n    this.destroyed = true;\r\n  }\r\n\r\n\r\n\r\n  dispatch(eventName, options) {\r\n    options = options || {};\r\n\r\n    if (typeof options.bubbles === 'undefined') {\r\n      options.bubbles = true;\r\n    }\r\n\r\n    if (typeof options.cancelable === 'undefined') {\r\n      options.cancelable = true;\r\n    }\r\n\r\n    const event = new CustomEvent(eventName, options);\r\n    this.element.dispatchEvent(event);\r\n\r\n    return event;\r\n  }\r\n\r\n\r\n\r\n  #listenerMatchesRootTarget(listener, target) {\r\n    return (\r\n      // 当没有提供选择器时\r\n      listener.selector === null &&\r\n      (\r\n        // 如果我们已经到达根目录则执行\r\n        target === this.element\r\n      )\r\n    );\r\n  }\r\n\r\n  #listenerMatchesDelegateTarget(listener, target) {\r\n\r\n    return (\r\n      // 文档不支持 matches()\r\n      target !== document &&\r\n      // 不要为根元素上的委托而烦恼\r\n      target !== this.element &&\r\n      // 检查事件是否被委托\r\n      listener.selector !== null &&\r\n      // 仅当选择器匹配时才执行\r\n      (\r\n        // 检查选择器是否有上下文\r\n        listener.isScoped ?\r\n          // 使用根元素的 ID 运行匹配\r\n          Element.prototype.matches.call(target, `[${this.#idKey}=\"${this.#id}\"] ` + listener.selector)\r\n          // 在没有上下文的情况下运行比赛\r\n          : Element.prototype.matches.call(target, listener.selector)\r\n      )\r\n    );\r\n  }\r\n\r\n\r\n  #listenerMatchesEventPhase(listener, useCapture) {\r\n    // 检查事件是否处于正确的阶段\r\n    return (listener.useCapture === useCapture);\r\n  }\r\n\r\n\r\n  #executeListenersAtElement(target, listeners, event, useCapture) {\r\n    let listener;\r\n    let returnValue;\r\n\r\n    // 执行每个满足条件的监听器\r\n    executeListeners: for (let listenerIndex = 0; listenerIndex < listeners.length; listenerIndex++) {\r\n      listener = listeners[listenerIndex];\r\n\r\n      if (\r\n        // 不处理禁用项目 #1 上的事件\r\n        !(event.type === 'click' && target.disabled === true)\r\n        &&\r\n        // 检查目标元素是否与此侦听器匹配\r\n        (\r\n          this.#listenerMatchesRootTarget(listener, target) ||\r\n          this.#listenerMatchesDelegateTarget(listener, target)\r\n        ) &&\r\n        this.#listenerMatchesEventPhase(listener, useCapture)\r\n      ) {\r\n        // 存储当前与事件匹配的目标\r\n        event.matchedTarget = target;\r\n\r\n        // 在委托目标范围内调用处理程序，传递事件\r\n        returnValue = listener.handler.call(target, event);\r\n\r\n        // 如果处理程序返回 false，则阻止 default 和 stopPropagation\r\n        if (returnValue === false) {\r\n          event.preventDefault();\r\n          event.stopPropagation();\r\n        }\r\n\r\n        if (event[this.#stopImmediatePropagationKey]) {\r\n          // 不再处理任何事件处理程序并停止冒泡\r\n          break executeListeners;\r\n        }\r\n      } // 结束 if\r\n    } // 结束执行监听器\r\n  }\r\n\r\n\r\n\r\n  #executeBubbleListener(event) {\r\n    let listeners = this.#listenersByType[event.type];\r\n\r\n    if (!listeners) {\r\n      utils.throw_Error(`_executeListeners 被调用以响应\"${event.type}\"，但我们没有监听它`)\r\n    }\r\n\r\n    if (listeners.length) {\r\n      // 获取听众的副本\r\n      // 如果没有这个，删除回调内的事件将导致错误\r\n      listeners = listeners.slice();\r\n\r\n      // 装饰事件对象，以便我们知道何时调用 stopPropagation\r\n      this.#decorateEvent(event);\r\n\r\n      /*\r\n        弄清楚是否应该模拟气泡相\r\n\r\n        对焦和模糊都不会起泡:\r\n          https://developer.mozilla.org/en-US/docs/Web/Events/focus\r\n          https://developer.mozilla.org/en-US/docs/Web/Events/blur\r\n\r\n        然而，聚焦、聚焦、变化和其他事件却如此。\r\n      */\r\n      let shouldBubble = event.type !== 'focus' && event.type !== 'blur';\r\n\r\n      // 重新使用捕获阶段计算出的事件路径\r\n      let eventPath = this.#getPath(event);\r\n\r\n      // 如果侦听器仍然存在且传播未停止，则通过冒泡目标列表来模拟冒泡阶段\r\n      bubbleUp: for (let eventPathIndex = 0; eventPathIndex < eventPath.length; eventPathIndex++) {\r\n        if (!listeners.length) {\r\n          // 如果没有更多侦听器要执行，请停止冒泡\r\n          break bubbleUp;\r\n        }\r\n\r\n        let currentTargetElement = eventPath[eventPathIndex];\r\n        this.#executeListenersAtElement(currentTargetElement, listeners, event, false);\r\n\r\n        // 如果处理程序告诉我们，请停止模拟气泡阶段\r\n        if (\r\n          event[this.#stopImmediatePropagationKey] ||\r\n          event[this.#stopPropagationKey]\r\n        ) {\r\n          break bubbleUp;\r\n        }\r\n\r\n        // 如果事件不应该冒泡，则仅在目标上模拟它\r\n        if (!shouldBubble) {\r\n          break bubbleUp;\r\n        }\r\n      }\r\n    }\r\n\r\n    // 排气后清理\r\n    this.#undecorateEvent(event);\r\n\r\n    // 清除路径\r\n    event[this.#pathKey] = null;\r\n  }\r\n\r\n\r\n  #executeCaptureListener(event) {\r\n\r\n\r\n    let listeners = this.#listenersByType[event.type];\r\n\r\n    if (!listeners) {\r\n      utils.throw_Error(`_executeListeners 被调用以响应${event.type},但我们没有监听它`)\r\n    }\r\n\r\n    if (listeners.length) {\r\n      // 获取听众的副本\r\n      // 如果没有这个，删除回调内的事件将导致错误\r\n      listeners = listeners.slice();\r\n\r\n      // 装饰事件对象，以便我们知道何时调用 stopPropagation\r\n      this.#decorateEvent(event);\r\n\r\n      // 通过 DOM 获取事件的路径\r\n      let eventPath = this.#getPath(event);\r\n\r\n      // 通过向下滴入目标列表来模拟捕获阶段\r\n      trickleDown: for (let eventPathIndex = eventPath.length - 1; eventPathIndex >= 0; eventPathIndex--) {\r\n        if (!listeners.length) {\r\n          // 如果没有更多的侦听器要执行，请停止滴流\r\n          break trickleDown;\r\n        }\r\n\r\n        let currentTargetElement = eventPath[eventPathIndex];\r\n        this.#executeListenersAtElement(currentTargetElement, listeners, event, true);\r\n\r\n        // console.log(this,event);\r\n\r\n        // 如果处理程序告诉我们停止向下滴入 DOM，则停止\r\n        if (\r\n          event[this.#stopImmediatePropagationKey] ||\r\n          event[this.#stopPropagationKey]\r\n        ) {\r\n          // 停止模拟滴流\r\n          break trickleDown;\r\n        }\r\n      }\r\n    }\r\n\r\n    // 排气后清理\r\n    // 如果事件到达那里，我们将在冒泡阶段重新装饰事件对象\r\n    this.#undecorateEvent(event);\r\n  }\r\n\r\n\r\n\r\n\r\n  #decorateEvent(event) {\r\n    let that = this;\r\n\r\n    event.stopPropagation = function () {\r\n      this[that.#stopPropagationKey] = true\r\n      Event.prototype.stopPropagation.call(this);\r\n    };\r\n\r\n\r\n    event.stopImmediatePropagation = function () {\r\n      this[that.#stopImmediatePropagationKey] = true;\r\n      Event.prototype.stopImmediatePropagation.call(this);\r\n    }\r\n\r\n\r\n  }\r\n\r\n\r\n  #undecorateEvent(event) {\r\n    event.stopPropagation = Event.prototype.stopPropagation;\r\n    event.stopImmediatePropagation = Event.prototype.stopImmediatePropagation;\r\n  }\r\n\r\n\r\n  #getPath(event) {\r\n\r\n    if (event[this.#pathKey]) {\r\n      return event[this.#pathKey];\r\n    }\r\n\r\n    // 如果事件在文本节点上触发，委托应假定目标是其父节点\r\n    let target = event.target;\r\n    if (target.nodeType === Node.TEXT_NODE) {\r\n      target = target.parentNode;\r\n    }\r\n\r\n    // 在根和调度事件的元素之间构建 DOM 树的数组\r\n    // HTML 规范规定，如果树在调度期间被修改，事件应该像之前一样冒泡\r\n    // 在调度之前构建此列表允许我们模拟该行为\r\n    let pathEl = target;\r\n    let eventPath = [];\r\n    buildPath: while (pathEl && pathEl !== this.element) {\r\n      eventPath.push(pathEl);\r\n      pathEl = pathEl.parentNode;\r\n    }\r\n    eventPath.push(this.element);\r\n    event[this.#pathKey] = eventPath;\r\n\r\n    return eventPath;\r\n  }\r\n\r\n\r\n  #isScoped(selector) {\r\n    return selector && this.#scopedSelectorRegex.test(selector);\r\n  }\r\n\r\n\r\n}\r\n\r\nexport default Delegateify\r\n"],"names":["utils","throw_Error","msg","Error","contains","set","subSet","i","length","indexOf","contains2","every","item","includes","_namespace","_classPrivateFieldLooseKey","_id","_scopedSelectorRegex","_listenersByType","_allListeners","_idKey","_pathKey","_stopPropagationKey","_stopImmediatePropagationKey","_captureListener","_bubbleListener","_listenerMatchesRootTarget","_listenerMatchesDelegateTarget","_listenerMatchesEventPhase","_executeListenersAtElement","_executeBubbleListener","_executeCaptureListener","_decorateEvent","_undecorateEvent","_getPath","_isScoped","Delegateify","constructor","selector","Object","defineProperty","this","value","_isScoped2","_getPath2","_undecorateEvent2","_decorateEvent2","_executeCaptureListener2","_executeBubbleListener2","_executeListenersAtElement2","_listenerMatchesEventPhase2","_listenerMatchesDelegateTarget2","_listenerMatchesRootTarget2","element","writable","_classPrivateFieldLooseBase","document","querySelector","create","bind","on","eventName","handler","useCapture","namespaces","dotIndex","slice","split","listenerList","addEventListener","listenerIsScoped","replace","scopedSelectorRegex","setAttribute","eventObject","isScoped","push","off","listener","index","listeners","splice","mapList","removeEventListener","destroy","destroyed","dispatch","options","bubbles","cancelable","event","CustomEvent","dispatchEvent","target","Element","prototype","matches","call","returnValue","executeListeners","listenerIndex","type","disabled","matchedTarget","preventDefault","stopPropagation","shouldBubble","eventPath","bubbleUp","eventPathIndex","currentTargetElement","trickleDown","that","Event","stopImmediatePropagation","nodeType","Node","TEXT_NODE","parentNode","pathEl","test"],"mappings":"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"}