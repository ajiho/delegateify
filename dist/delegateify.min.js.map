{"version":3,"file":"delegateify.min.js","sources":["../src/js/utils/index.js","../src/js/index.js"],"sourcesContent":["export default {\r\n\r\n\r\n    throw_Error(msg) {\r\n        throw new Error(`Delegateify: ${msg}`);\r\n    },\r\n\r\n    contains(set, subSet) {\r\n        for (let i = 0; i < subSet.length; i++) {\r\n            if (set.indexOf(subSet[i]) === -1) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    },\r\n\r\n    contains2(set, subSet) {\r\n        return subSet.every(item => set.includes(item));\r\n    }\r\n\r\n}","import utils from \"./utils\";\r\n\r\nlet i = 0\r\n\r\nclass Delegateify {\r\n  element\r\n  #namespace = 'delegateify'\r\n  #id\r\n  #scopedSelectorRegex = /^\\s*(>|:scope\\s*>)/\r\n  #listenersByType\r\n  #allListeners = []\r\n  //存储id的key\r\n  #idKey = `__${this.#namespace}Id__`\r\n  //路径的key\r\n  #pathKey\r\n\r\n  #stopPropagationKey = `_${this.#namespace}PropagationStopped`\r\n  #stopImmediatePropagationKey = `_${this.#namespace}ImmediatePropagationStopped`\r\n\r\n  #captureListener\r\n  #bubbleListener\r\n\r\n  constructor(selector) {\r\n\r\n    this.element = typeof selector === 'string' ? document.querySelector(selector) : selector;\r\n\r\n    // 事件名称到事件数组的映射\r\n    // 不要从 Object 继承，这样我们就不会与其原型上的属性发生冲突\r\n    this.#listenersByType = Object.create(null);\r\n\r\n    /*\r\n  该实例跟踪的所有侦听器对象的列表\r\n       每个项目采用以下形式：\r\n      {\r\n        eventName: String,\r\n        handler: Function,\r\n        namespaces: Array<string>,\r\n        selector: String | null,\r\n        useCapture: Boolean,\r\n        isScoped: Boolean\r\n      }\r\n    */\r\n\r\n    // 确保this的值\r\n    this.#captureListener = this.#executeCaptureListener.bind(this);\r\n    this.#bubbleListener = this.#executeBubbleListener.bind(this);\r\n\r\n    // 所有实例都会获得一个ID\r\n    this.#id = i++;\r\n    this.#pathKey = `_${this.#namespace}Path${this.#id}`\r\n\r\n\r\n  }\r\n\r\n\r\n  on(eventName, selector, handler, useCapture) {\r\n    if (typeof selector === 'function') {\r\n      useCapture = handler;\r\n      handler = selector;\r\n      selector = null;\r\n    }\r\n\r\n    if (typeof handler !== 'function') {\r\n      utils.throw_Error('无法使用非函数处理程序添加侦听器')\r\n    }\r\n\r\n    // 如果每个假值（未定义或传递空字符串）则为空\r\n    if (!selector) {\r\n      selector = null;\r\n    }\r\n\r\n\r\n    if (typeof useCapture === 'undefined') {\r\n      // 强制使用Capture进行焦点和模糊事件\r\n      if (eventName === 'focus' || eventName === 'blur') {\r\n        // 默认情况下 true 仅适用于焦点和模糊事件\r\n        useCapture = true;\r\n      }\r\n      else {\r\n        // 默认为 false\r\n        // 这与 HTML API 匹配\r\n        useCapture = false;\r\n      }\r\n    }\r\n\r\n    // 提取命名空间\r\n    let namespaces = null;\r\n    let dotIndex = eventName.indexOf('.');\r\n    if (dotIndex !== -1) {\r\n      namespaces = eventName.slice(dotIndex + 1).split('.');\r\n      eventName = eventName.slice(0, dotIndex);\r\n    }\r\n\r\n    // 获取/创建事件类型的列表\r\n    let listenerList = this.#listenersByType[eventName];\r\n    if (!listenerList) {\r\n      listenerList = this.#listenersByType[eventName] = [];\r\n\r\n      // 添加实际的监听器\r\n      this.element.addEventListener(eventName, this.#captureListener, true);\r\n      this.element.addEventListener(eventName, this.#bubbleListener, false);\r\n    }\r\n\r\n    // 如果选择器有作用域，则设置特殊 ID 属性\r\n    let listenerIsScoped = this.#isScoped(selector);\r\n    if (listenerIsScoped) {\r\n      // 规范化选择器，使其不使用 :scope\r\n      selector = selector.replace(scopedSelectorRegex, '>');\r\n\r\n      // 存储唯一 ID 并设置我们将用于范围的特殊属性\r\n      this.element.setAttribute(this.#idKey, this.#id);\r\n    }\r\n\r\n    // 使用事件信息创建一个对象\r\n    const eventObject = {\r\n      eventName: eventName,\r\n      handler: handler,\r\n      namespaces: namespaces,\r\n      selector: selector,\r\n      useCapture: useCapture,\r\n      isScoped: listenerIsScoped\r\n    };\r\n\r\n    // 相对于当前类型并与其他类型一起存储\r\n    listenerList.push(eventObject);\r\n    this.#allListeners.push(eventObject);\r\n  }\r\n\r\n\r\n  off(eventName, selector, handler, useCapture) {\r\n    if (typeof selector === 'function') {\r\n      useCapture = handler;\r\n      handler = selector;\r\n      selector = null;\r\n    }\r\n\r\n    // 如果没有提供则为空\r\n    if (typeof eventName === 'undefined') {\r\n      eventName = null;\r\n    }\r\n\r\n    if (typeof selector === 'undefined') {\r\n      selector = null;\r\n    }\r\n\r\n    if (typeof handler === 'undefined') {\r\n      handler = null;\r\n    }\r\n\r\n    if (typeof useCapture === 'undefined') {\r\n      useCapture = null;\r\n    }\r\n\r\n    // 提取命名空间\r\n    let namespaces = null;\r\n    if (eventName) {\r\n      let dotIndex = eventName.indexOf('.');\r\n      if (dotIndex !== -1) {\r\n        namespaces = eventName.slice(dotIndex + 1).split('.');\r\n        eventName = eventName.slice(0, dotIndex);\r\n      }\r\n    }\r\n\r\n    // 为空\r\n    if (eventName === '') {\r\n      eventName = null;\r\n    }\r\n\r\n    let listener;\r\n    let index;\r\n    let listeners = this.#allListeners;\r\n\r\n    for (var i = 0; i < listeners.length; i++) {\r\n      listener = listeners[i];\r\n\r\n      if (\r\n        (eventName === null || listener.eventName === eventName) &&\r\n        (selector === null || listener.selector === selector) &&\r\n        (handler === null || listener.handler === handler) &&\r\n        (useCapture === null || listener.useCapture === useCapture) &&\r\n        (\r\n          // 删除匹配的侦听器，无论命名空间如何\r\n          namespaces === null ||\r\n          // 监听器匹配所有指定的命名空间\r\n          (listener.namespaces && utils.contains(listener.namespaces, namespaces))\r\n        )\r\n      ) {\r\n        // 删除监听信息\r\n        this.#allListeners.splice(i, 1);\r\n\r\n        // 数组长度已更改，因此在下一次迭代时检查相同的索引\r\n        i--;\r\n\r\n        // 获取listenersByType映射中的索引\r\n        if (!this.#listenersByType[listener.eventName]) {\r\n          utils.throw_Error(`缺少 ListenersByType 的${listener.eventName}`)\r\n        }\r\n\r\n        // 在其他查找列表中查找事件信息\r\n        index = this.#listenersByType[listener.eventName].indexOf(listener);\r\n        if (index !== -1) {\r\n          var mapList = this.#listenersByType[listener.eventName];\r\n\r\n          // 从地图上删除\r\n          mapList.splice(index, 1);\r\n\r\n          // 检查我们是否已删除此事件类型的所有侦听器\r\n          if (mapList.length === 0) {\r\n            // 如有必要，删除实际的侦听器\r\n            this.element.removeEventListener(listener.eventName, this.#captureListener, true);\r\n            this.element.removeEventListener(listener.eventName, this.#bubbleListener, false);\r\n\r\n            // 为了提高性能，避免使用删除运算符\r\n            this.#listenersByType[listener.eventName] = null;\r\n          }\r\n        }\r\n        else {\r\n          utils.throw_Error('事件存在于allEvents中，但不存在于listenersByType中')\r\n        }\r\n        // 现在别停下来！ 我们要删除所有匹配的监听器，所以继续循环\r\n      }\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n\r\n  destroy() {\r\n    if (this.destroyed) {\r\n      // 实例已被销毁，不执行任何操作\r\n      return;\r\n    }\r\n\r\n    // 移除所有的事件\r\n    this.off();\r\n\r\n    // 删除所有引用\r\n    this.#listenersByType = null;\r\n    this.#allListeners = null;\r\n    this.element = null;\r\n    this.destroyed = true;\r\n  }\r\n\r\n\r\n\r\n  dispatch(eventName, options) {\r\n    options = options || {};\r\n\r\n    if (typeof options.bubbles === 'undefined') {\r\n      options.bubbles = true;\r\n    }\r\n\r\n    if (typeof options.cancelable === 'undefined') {\r\n      options.cancelable = true;\r\n    }\r\n\r\n    const event = new CustomEvent(eventName, options);\r\n    this.element.dispatchEvent(event);\r\n\r\n    return event;\r\n  }\r\n\r\n\r\n\r\n  #listenerMatchesRootTarget(listener, target) {\r\n    return (\r\n      // 当没有提供选择器时\r\n      listener.selector === null &&\r\n      (\r\n        // 如果我们已经到达根目录则执行\r\n        target === this.element\r\n      )\r\n    );\r\n  }\r\n\r\n  #listenerMatchesDelegateTarget(listener, target) {\r\n\r\n    return (\r\n      // 文档不支持 matches()\r\n      target !== document &&\r\n      // 不要为根元素上的委托而烦恼\r\n      target !== this.element &&\r\n      // 检查事件是否被委托\r\n      listener.selector !== null &&\r\n      // 仅当选择器匹配时才执行\r\n      (\r\n        // 检查选择器是否有上下文\r\n        listener.isScoped ?\r\n          // 使用根元素的 ID 运行匹配\r\n          Element.prototype.matches.call(target, `[${this.#idKey}=\"${this.#id}\"] ` + listener.selector)\r\n          // 在没有上下文的情况下运行比赛\r\n          : Element.prototype.matches.call(target, listener.selector)\r\n      )\r\n    );\r\n  }\r\n\r\n\r\n  #listenerMatchesEventPhase(listener, useCapture) {\r\n    // 检查事件是否处于正确的阶段\r\n    return (listener.useCapture === useCapture);\r\n  }\r\n\r\n\r\n  #executeListenersAtElement(target, listeners, event, useCapture) {\r\n    let listener;\r\n    let returnValue;\r\n\r\n    // 执行每个满足条件的监听器\r\n    executeListeners: for (let listenerIndex = 0; listenerIndex < listeners.length; listenerIndex++) {\r\n      listener = listeners[listenerIndex];\r\n\r\n      if (\r\n        // 不处理禁用项目 #1 上的事件\r\n        !(event.type === 'click' && target.disabled === true)\r\n        &&\r\n        // 检查目标元素是否与此侦听器匹配\r\n        (\r\n          this.#listenerMatchesRootTarget(listener, target) ||\r\n          this.#listenerMatchesDelegateTarget(listener, target)\r\n        ) &&\r\n        this.#listenerMatchesEventPhase(listener, useCapture)\r\n      ) {\r\n        // 存储当前与事件匹配的目标\r\n        event.matchedTarget = target;\r\n\r\n        // 在委托目标范围内调用处理程序，传递事件\r\n        returnValue = listener.handler.call(target, event);\r\n\r\n        // 如果处理程序返回 false，则阻止 default 和 stopPropagation\r\n        if (returnValue === false) {\r\n          event.preventDefault();\r\n          event.stopPropagation();\r\n        }\r\n\r\n        if (event[this.#stopImmediatePropagationKey]) {\r\n          // 不再处理任何事件处理程序并停止冒泡\r\n          break executeListeners;\r\n        }\r\n      } // 结束 if\r\n    } // 结束执行监听器\r\n  }\r\n\r\n\r\n\r\n  #executeBubbleListener(event) {\r\n    let listeners = this.#listenersByType[event.type];\r\n\r\n    if (!listeners) {\r\n      utils.throw_Error(`_executeListeners 被调用以响应\"${event.type}\"，但我们没有监听它`)\r\n    }\r\n\r\n    if (listeners.length) {\r\n      // 获取听众的副本\r\n      // 如果没有这个，删除回调内的事件将导致错误\r\n      listeners = listeners.slice();\r\n\r\n      // 装饰事件对象，以便我们知道何时调用 stopPropagation\r\n      this.#decorateEvent(event);\r\n\r\n      /*\r\n        弄清楚是否应该模拟气泡相\r\n\r\n        对焦和模糊都不会起泡:\r\n          https://developer.mozilla.org/en-US/docs/Web/Events/focus\r\n          https://developer.mozilla.org/en-US/docs/Web/Events/blur\r\n\r\n        然而，聚焦、聚焦、变化和其他事件却如此。\r\n      */\r\n      let shouldBubble = event.type !== 'focus' && event.type !== 'blur';\r\n\r\n      // 重新使用捕获阶段计算出的事件路径\r\n      let eventPath = this.#getPath(event);\r\n\r\n      // 如果侦听器仍然存在且传播未停止，则通过冒泡目标列表来模拟冒泡阶段\r\n      bubbleUp: for (let eventPathIndex = 0; eventPathIndex < eventPath.length; eventPathIndex++) {\r\n        if (!listeners.length) {\r\n          // 如果没有更多侦听器要执行，请停止冒泡\r\n          break bubbleUp;\r\n        }\r\n\r\n        let currentTargetElement = eventPath[eventPathIndex];\r\n        this.#executeListenersAtElement(currentTargetElement, listeners, event, false);\r\n\r\n        // 如果处理程序告诉我们，请停止模拟气泡阶段\r\n        if (\r\n          event[this.#stopImmediatePropagationKey] ||\r\n          event[this.#stopPropagationKey]\r\n        ) {\r\n          break bubbleUp;\r\n        }\r\n\r\n        // 如果事件不应该冒泡，则仅在目标上模拟它\r\n        if (!shouldBubble) {\r\n          break bubbleUp;\r\n        }\r\n      }\r\n    }\r\n\r\n    // 排气后清理\r\n    this.#undecorateEvent(event);\r\n\r\n    // 清除路径\r\n    event[this.#pathKey] = null;\r\n  }\r\n\r\n\r\n  #executeCaptureListener(event) {\r\n\r\n\r\n    let listeners = this.#listenersByType[event.type];\r\n\r\n    if (!listeners) {\r\n      utils.throw_Error(`_executeListeners 被调用以响应${event.type},但我们没有监听它`)\r\n    }\r\n\r\n    if (listeners.length) {\r\n      // 获取听众的副本\r\n      // 如果没有这个，删除回调内的事件将导致错误\r\n      listeners = listeners.slice();\r\n\r\n      // 装饰事件对象，以便我们知道何时调用 stopPropagation\r\n      this.#decorateEvent(event);\r\n\r\n      // 通过 DOM 获取事件的路径\r\n      let eventPath = this.#getPath(event);\r\n\r\n      // 通过向下滴入目标列表来模拟捕获阶段\r\n      trickleDown: for (let eventPathIndex = eventPath.length - 1; eventPathIndex >= 0; eventPathIndex--) {\r\n        if (!listeners.length) {\r\n          // 如果没有更多的侦听器要执行，请停止滴流\r\n          break trickleDown;\r\n        }\r\n\r\n        let currentTargetElement = eventPath[eventPathIndex];\r\n        this.#executeListenersAtElement(currentTargetElement, listeners, event, true);\r\n\r\n        // console.log(this,event);\r\n\r\n        // 如果处理程序告诉我们停止向下滴入 DOM，则停止\r\n        if (\r\n          event[this.#stopImmediatePropagationKey] ||\r\n          event[this.#stopPropagationKey]\r\n        ) {\r\n          // 停止模拟滴流\r\n          break trickleDown;\r\n        }\r\n      }\r\n    }\r\n\r\n    // 排气后清理\r\n    // 如果事件到达那里，我们将在冒泡阶段重新装饰事件对象\r\n    this.#undecorateEvent(event);\r\n  }\r\n\r\n\r\n\r\n\r\n  #decorateEvent(event) {\r\n    let that = this;\r\n\r\n    event.stopPropagation = function () {\r\n      this[that.#stopPropagationKey] = true\r\n      Event.prototype.stopPropagation.call(this);\r\n    };\r\n\r\n\r\n    event.stopImmediatePropagation = function () {\r\n      this[that.#stopImmediatePropagationKey] = true;\r\n      Event.prototype.stopImmediatePropagation.call(this);\r\n    }\r\n\r\n\r\n  }\r\n\r\n\r\n  #undecorateEvent(event) {\r\n    event.stopPropagation = Event.prototype.stopPropagation;\r\n    event.stopImmediatePropagation = Event.prototype.stopImmediatePropagation;\r\n  }\r\n\r\n\r\n  #getPath(event) {\r\n\r\n    if (event[this.#pathKey]) {\r\n      return event[this.#pathKey];\r\n    }\r\n\r\n    // 如果事件在文本节点上触发，委托应假定目标是其父节点\r\n    let target = event.target;\r\n    if (target.nodeType === Node.TEXT_NODE) {\r\n      target = target.parentNode;\r\n    }\r\n\r\n    // 在根和调度事件的元素之间构建 DOM 树的数组\r\n    // HTML 规范规定，如果树在调度期间被修改，事件应该像之前一样冒泡\r\n    // 在调度之前构建此列表允许我们模拟该行为\r\n    let pathEl = target;\r\n    let eventPath = [];\r\n    buildPath: while (pathEl && pathEl !== this.element) {\r\n      eventPath.push(pathEl);\r\n      pathEl = pathEl.parentNode;\r\n    }\r\n    eventPath.push(this.element);\r\n    event[this.#pathKey] = eventPath;\r\n\r\n    return eventPath;\r\n  }\r\n\r\n\r\n  #isScoped(selector) {\r\n    return selector && this.#scopedSelectorRegex.test(selector);\r\n  }\r\n\r\n\r\n}\r\n\r\nexport default Delegateify\r\n"],"names":["utils","throw_Error","msg","Error","contains","set","subSet","i","length","indexOf","contains2","every","item","includes","_namespace","_classPrivateFieldLooseKey","_id","_scopedSelectorRegex","_listenersByType","_allListeners","_idKey","_pathKey","_stopPropagationKey","_stopImmediatePropagationKey","_captureListener","_bubbleListener","_listenerMatchesRootTarget","_listenerMatchesDelegateTarget","_listenerMatchesEventPhase","_executeListenersAtElement","_executeBubbleListener","_executeCaptureListener","_decorateEvent","_undecorateEvent","_getPath","_isScoped","_listenerMatchesRootTarget2","listener","target","selector","this","element","_listenerMatchesDelegateTarget2","document","isScoped","Element","prototype","matches","call","_classPrivateFieldLooseBase","_listenerMatchesEventPhase2","useCapture","_executeListenersAtElement2","listeners","event","returnValue","executeListeners","listenerIndex","type","disabled","matchedTarget","handler","preventDefault","stopPropagation","_executeBubbleListener2","slice","shouldBubble","eventPath","bubbleUp","eventPathIndex","currentTargetElement","_executeCaptureListener2","trickleDown","_decorateEvent2","that","Event","stopImmediatePropagation","_undecorateEvent2","_getPath2","nodeType","Node","TEXT_NODE","parentNode","pathEl","push","_isScoped2","test","constructor","Object","defineProperty","value","writable","querySelector","create","bind","on","eventName","namespaces","dotIndex","split","listenerList","addEventListener","listenerIsScoped","replace","scopedSelectorRegex","setAttribute","eventObject","off","index","splice","mapList","removeEventListener","destroy","destroyed","dispatch","options","bubbles","cancelable","CustomEvent","dispatchEvent"],"mappings":"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"}